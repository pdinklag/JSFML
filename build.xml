<project name="JSFML">
	<description>
		JSFML build file for Apache Ant.
	</description>

	<!-- Environment -->
	<property environment="env" />
	
	<!-- JSFML properties -->
	<property name="jsfml.package" value="org.jsfml" />
	<property name="jsfml.bin" value="jsfml" />
	<property name="jsfml.out" location="./out" />
	
	<!-- SFML properties -->
	<property name="sfml.bin" location="./sfml/bin" />
	<property name="sfml.lib" location="./sfml/lib" />
	<property name="sfml.include" location="./sfml/include" />
	
	<!-- Java properties -->
	<property name="java.src" location="./src/java" />
	<property name="java.out" location="${jsfml.out}/classes" />
	<property name="java.classpath" value="${java.out}" />
	<property name="java.target" value="1.6" />
	
	<!-- Javadoc properties -->
	<property name="javadoc.out" location="./javadoc" />
	
	<!-- Jar properties -->
	<property name="jar.file" value="${jsfml.out}/jsfml.jar" />
	
	<!-- C++ properties -->
	<property name="cpp.src" location="./src/cpp" />
	<property name="cpp.include" location="./include" />
	<property name="cpp.obj" location="${jsfml.out}/obj" />
	<property name="cpp.out" location="${jsfml.out}/bin" />
	
	<!-- JAR signing properties -->
	<property name="jarsigner.alias" value="pdinklag" />
	
	<!-- Compile Java -->
	<target name="compile" description="Compile the Java sources.">
		<mkdir dir="${java.out}" />
		<javac includeAntRuntime="false" srcdir="${java.src}" destdir="${java.out}" classpath="${java.classpath}" target="${java.target}" />
	</target>
	
	<!-- Generate headers -->
	<target name="headers" description="Generate the C++ JNI headers." depends="compile">
		<mkdir dir="${cpp.include}/JSFML/JNI" />
		<javah destdir="${cpp.include}/JSFML/JNI" classpath="${java.classpath}">
			<!-- base -->
			<class name="${jsfml.package}.SFMLNative" />
			
			<!-- system -->
			<class name="${jsfml.package}.system.Clock" />
			
			<!-- window -->
			<class name="${jsfml.package}.window.Joystick" />
			<class name="${jsfml.package}.window.Keyboard" />
			<class name="${jsfml.package}.window.Mouse" />
			<class name="${jsfml.package}.window.VideoMode" />
            <class name="${jsfml.package}.window.Window" />
			
			<!-- graphics -->
			<class name="${jsfml.package}.graphics.CircleShape" />
			<class name="${jsfml.package}.graphics.ConvexShape" />
			<class name="${jsfml.package}.graphics.Font" />
			<class name="${jsfml.package}.graphics.Image" />
			<class name="${jsfml.package}.graphics.RectangleShape" />
			<class name="${jsfml.package}.graphics.RenderTexture" />
			<class name="${jsfml.package}.graphics.RenderWindow" />
			<class name="${jsfml.package}.graphics.Shader" />
			<class name="${jsfml.package}.graphics.Sprite" />
			<class name="${jsfml.package}.graphics.Text" />
			<class name="${jsfml.package}.graphics.Texture" />
			<class name="${jsfml.package}.graphics.VertexArray" />
			<class name="${jsfml.package}.graphics.View" />
			
			<!-- audio -->
			<class name="${jsfml.package}.audio.Listener" />
			<class name="${jsfml.package}.audio.Music" />
			<class name="${jsfml.package}.audio.Sound" />
			<class name="${jsfml.package}.audio.SoundBuffer" />
			<class name="${jsfml.package}.audio.SoundBufferRecorder" />
			<class name="${jsfml.package}.audio.SoundRecorder" />
		</javah>
	</target>
	
	<!-- Compile C++ for Linux - not to be used directly, use either linux32 or linux64 -->
	<target name="linux.build">
		<!-- Requires ${arch} -->
		<delete file="${cpp.out}/${arch}/lib${jsfml.bin}.so" />
		<mkdir dir="${cpp.obj}" />
		<mkdir dir="${cpp.out}" />
		<mkdir dir="${cpp.out}/${arch}" />
		
		<!-- get source files -->
		<fileset id="cpp.src.fileset" dir="${cpp.src}">
			<include name="Intercom/*.cpp" />
			<include name="JNI/*.cpp" />
		</fileset>
		<pathconvert pathsep=" " property="cpp.src.files" refid="cpp.src.fileset"/>
		
		<!-- compile and link -->
		<exec executable="g++" dir="${cpp.obj}" failonerror="true">
			<arg value="-I${cpp.include}" />
			<arg value="-I${sfml.include}" />
			<arg value="-I${env.JAVA_HOME}/include" />
			<arg value="-I${env.JAVA_HOME}/include/linux" />
			<arg value="-shared" />
			<arg value="-fPIC" />
			<arg value="-o${cpp.out}/${arch}/lib${jsfml.bin}.so" />
			<arg value="-Wl,-L${sfml.bin}/${arch},-lstdc++,-lsfml-system,-lsfml-window,-lsfml-graphics,-lsfml-audio" />
			<arg line="${cpp.src.files}" />
		</exec>
		
		<copy todir="${cpp.out}/${arch}">
			<fileset dir="${sfml.bin}/${arch}" includes="*.so" />
		</copy>
		
		<checksum>
			<fileset dir="${cpp.out}/${arch}" includes="*.so" />
		</checksum>
	</target>
	
	<!-- Compile C++ for Linux 32 -->
	<target name="linux32" description="Build the C++ sources for Linux 32 bit.">
		<property name="arch" value="linux_x86" />
		<ant target="linux.build" />
	</target>
	
	<!-- Compile C++ for Linux 64 -->
	<target name="linux64" description="Build the C++ sources for Linux 64 bit.">
		<property name="arch" value="linux_x64" />
		<ant target="linux.build" />
	</target>
	
	<!-- Phony target to determine the Microsoft Visual Studio and Windows SDK paths on Windows systems. -->
	<target name="windows.find.paths">
		<exec executable="windows-find-vs.bat" outputproperty="path.vs" />
		<exec executable="windows-find-winsdk.bat" outputproperty="path.winsdk" />
	</target>
	
	<!-- Compile C++ for Windows - not to be used directly, use either win32 or win64 -->
	<target name="windows.build">
		<!-- Requires ${arch}, ${cl}, ${link}, ${cwd}, ${winsdk.lib} and ${vs.lib} -->
		<delete file="${cpp.out}/${arch}/${jsfml.bin}.dll" />
		<mkdir dir="${cpp.obj}" />
		<mkdir dir="${cpp.out}" />
		<mkdir dir="${cpp.out}/${arch}" />
		
		<!-- compile -->
		<exec executable="${cl}" dir="${cwd}" failonerror="true">
			<arg value="/nologo" />
			<arg value="/c" />
			<arg value="/Ox" />
			<arg value="/EHsc" />
			<arg value="/I${path.winsdk}/Include" />
			<arg value="/I${path.vs}/VC/include" />
			<arg value="/I${cpp.include}" />
			<arg value="/I${sfml.include}" />
			<arg value="/I${env.JAVA_HOME}/include" />
			<arg value="/I${env.JAVA_HOME}/include/win32" />
			<arg value="${cpp.src}/Intercom/*.cpp" />
			<arg value="${cpp.src}/JNI/*.cpp" />
			<arg value="/Fo${cpp.obj}/" />
		</exec>

		<!-- link -->
		<exec executable="${link}" dir="${cwd}" failonerror="true">
			<arg value="/nologo" />
			<arg value="/DLL" />
			<arg value="/OUT:${cpp.out}/${arch}/${jsfml.bin}.dll" />
			<arg value="/LIBPATH:${winsdk.lib}" />
			<arg value="/LIBPATH:${vs.lib}" />
			<arg value="/LIBPATH:${sfml.lib}/${arch}" />
			<arg value="sfml-main.lib" />
			<arg value="sfml-system.lib" />
			<arg value="sfml-window.lib" />
			<arg value="sfml-graphics.lib" />
			<arg value="sfml-audio.lib" />
			<arg value="${cpp.obj}/*.obj" />
		</exec>
		
		<delete file="${cpp.out}/${arch}/${jsfml.bin}.exp" />
		<delete file="${cpp.out}/${arch}/${jsfml.bin}.lib" />
		
		<copy todir="${cpp.out}/${arch}">
			<fileset dir="${sfml.bin}/${arch}" includes="*.dll" />
		</copy>
		
		<checksum>
			<fileset dir="${cpp.out}/${arch}" includes="*.dll" />
		</checksum>
	</target>
	
	<!-- Compile C++ for Windows 32 -->
	<target name="win32" description="Build the C++ sources for Windows 32 bit." depends="windows.find.paths">
		<property name="cl" value="${path.vs}/VC/bin/cl.exe" />
		<property name="link" value="${path.vs}/VC/bin/link.exe" />
		<property name="cwd" value="${path.vs}/Common7/IDE" />
		
		<property name="vs.lib" value="${path.vs}/VC/lib" />
		<property name="winsdk.lib" value="${path.winsdk}/Lib" />
		
		<property name="arch" value="windows_x86" />
		
		<ant target="windows.build" />
	</target>
	
	<!-- Compile C++ for Windows 64 -->
	<target name="win64" description="Build the C++ sources for Windows 64 bit." depends="windows.find.paths">
		<property name="cl" value="${path.vs}/VC/bin/amd64/cl.exe" />
		<property name="link" value="${path.vs}/VC/bin/amd64/link.exe" />
		<property name="cwd" value="${path.vs}/VC/bin/amd64" />
		
		<property name="vs.lib" value="${path.vs}/VC/lib/amd64" />
		<property name="winsdk.lib" value="${path.winsdk}/Lib/x64" />
		
		<property name="arch" value="windows_x64" />
		
		<ant target="windows.build" />
	</target>
	
	<!-- Jar -->
	<target name="jar" description="Generate the JAR file." depends="compile">
		<jar destfile="${jar.file}">
			<fileset dir="${java.out}" includes="**/*.class" />
			<fileset dir="${jsfml.out}" includes="**/*.dll **/*.so* **/*.dylib **/*.MD5" />
			<manifest>
				<attribute name="Sealed" value="true" />
				<attribute name="Specification-Title" value="JSFML" />
				<attribute name="Specification-Version" value="0" />
				<attribute name="Specification-Vendor" value="pdinklag" />
				<attribute name="Implementation-Title" value="org.sfml" />
				<attribute name="Implementation-Version" value="0" />
				<attribute name="Implementation-Vendor" value="pdinklag" />
			</manifest>
		</jar>
        
        <!-- Sign the jar if the user give a password -->
		<input message="Please enter keystore password (or empty to skip signing):" addproperty="storepass" />
        <condition property="hasPassword">
            <not>
                <equals arg1="${storepass}" arg2="" />
            </not>
        </condition>
        <ant target="signjar" />
	</target>
    
    <!-- Sign jar -->
    <target name="signjar" description="Sign the jar with the password given by the user." if="hasPassword">
        <signjar jar="${jar.file}" alias="${jarsigner.alias}" storepass="${storepass}" lazy="true" />
    </target>
	
	<!-- Javadoc -->
	<target name="javadoc" description="Generate the Javadoc.">
		<mkdir dir="${javadoc.out}" />
		<javadoc sourcepath="${java.src}" destdir="${javadoc.out}" />
	</target>
	
	<!-- Clean everything -->
	<target name="clean" description="Clean up.">
		<delete dir="${jsfml.out}" />
		<delete dir="${examples.out}" />
		<delete dir="${javadoc.out}" />
	</target>
</project>
